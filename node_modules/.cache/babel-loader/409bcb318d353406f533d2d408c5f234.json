{"remainingRequest":"/Users/ryanoctavius/vuerest_9353/node_modules/babel-loader/lib/index.js!/Users/ryanoctavius/vuerest_9353/node_modules/vuetify-loader/lib/loader.js!/Users/ryanoctavius/vuerest_9353/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ryanoctavius/vuerest_9353/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ryanoctavius/vuerest_9353/node_modules/vue2-gmap-custom-marker/gmap-custom-marker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ryanoctavius/vuerest_9353/node_modules/vue2-gmap-custom-marker/gmap-custom-marker.vue","mtime":499162500000},{"path":"/Users/ryanoctavius/vuerest_9353/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ryanoctavius/vuerest_9353/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ryanoctavius/vuerest_9353/node_modules/vuetify-loader/lib/loader.js","mtime":1567240333000},{"path":"/Users/ryanoctavius/vuerest_9353/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ryanoctavius/vuerest_9353/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["gmap-custom-marker.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :style=\"{opacity: opacity}\">\n    <slot/>\n  </div>\n</template>\n<script>\nimport * as VueGoogleMaps from \"vue2-google-maps\";\nexport default {\n  mixins: [VueGoogleMaps.MapElementMixin],\n  props: {\n    marker: {\n      type: Object,\n      default: undefined\n    },\n    offsetX: {\n      type: Number,\n      default: 0\n    },\n    offsetY: {\n      type: Number,\n      default: 0\n    },\n    alignment: {\n      type: String,\n      default: \"top\"\n    },\n    zIndex: {\n      type: Number,\n      default: 50\n    }\n  },\n  inject: {\n    $clusterPromise: {\n      default: null\n    }\n  },\n  beforeCreate(options) {\n    if (this.$clusterPromise) {\n      options.map = null;\n    }\n\n    return this.$clusterPromise;\n  },\n  methods: {\n    afterCreate(inst) {\n      if (this.$clusterPromise) {\n        this.$clusterPromise.then(co => {\n          co.addMarker(inst);\n          this.$clusterObject = co;\n        });\n      }\n    }\n  },\n  data() {\n    return {\n      opacity: 0.01\n    };\n  },\n  watch: {\n    marker(val) {\n      this.$mapPromise.then(map => this.$overlay.setPosition());\n    },\n    zIndex(val) {\n      this.$overlay.repaint()\n    }\n  },\n  provide() {\n    const self = this;\n    return this.$mapPromise.then(map => {\n      class Overlay extends google.maps.OverlayView {\n        constructor(map) {\n          super();\n          this.setMap(map);\n          this.draw = () => this.repaint();\n          this.setPosition = () => this.repaint();\n        }\n        repaint() {\n          const div = self.$el;\n          const projection = this.getProjection();\n          if (projection && div) {\n            const posPixel = projection.fromLatLngToDivPixel(self.latLng);\n            let x, y;\n            switch (self.alignment) {\n              case \"top\":\n                x = posPixel.x - div.offsetWidth / 2;\n                y = posPixel.y - div.offsetHeight;\n                break;\n              case \"bottom\":\n                x = posPixel.x - div.offsetWidth / 2;\n                y = posPixel.y;\n                break;\n              case \"left\":\n                x = posPixel.x - div.offsetWidth;\n                y = posPixel.y - div.offsetHeight / 2;\n                break;\n              case \"right\":\n                x = posPixel.x;\n                y = posPixel.y - div.offsetHeight / 2;\n                break;\n              case \"center\":\n                x = posPixel.x - div.offsetWidth / 2;\n                y = posPixel.y - div.offsetHeight / 2;\n                break;\n              case \"topleft\":\n              case \"lefttop\":\n                x = posPixel.x - div.offsetWidth;\n                y = posPixel.y - div.offsetHeight;\n                break;\n              case \"topright\":\n              case \"righttop\":\n                x = posPixel.x;\n                y = posPixel.y - div.offsetHeight;\n                break;\n              case \"bottomleft\":\n              case \"leftop\":\n                x = posPixel.x - div.offsetWidth;\n                y = posPixel.y;\n                break;\n              case \"bottomright\":\n              case \"rightbottom\":\n                x = posPixel.x;\n                y = posPixel.y;\n                break;\n              default:\n                throw new Error(\"Invalid alignment type of custom marker!\");\n                break;\n            }\n            div.style.left = x + self.offsetX + \"px\";\n            div.style.top = y + self.offsetY + \"px\";\n            div.style[\"z-index\"] = self.zIndex;\n          }\n        }\n        onAdd() {\n          const div = self.$el;\n          const panes = this.getPanes();\n          div.style.position = \"absolute\";\n          div.style.display = \"inline-block\";\n          div.style.zIndex = self.zIndex;\n          panes.overlayLayer.appendChild(div);\n          panes.overlayMouseTarget.appendChild(div);\n          this.getDraggable = () => false;\n          this.getPosition = () => {\n            return new google.maps.LatLng(self.lat, self.lng);\n          };\n          self.afterCreate(this);\n        }\n        onRemove() {\n          if (self.$el) {\n            const ua = window.navigator.userAgent\n            const msie = ua.indexOf(\"MSIE \")\n            if (msie > 0 || !!ua.match(/Trident.*rv\\:11\\./)) {\n              self.$el.parentNode.removeChild(self.$el)\n            } else {\n              self.$el.remove();\n            }\n          }\n        }\n      }\n      this.$overlay = new Overlay(map);\n      setTimeout(() => {\n          if (this.$overlay) {\n            this.$overlay.repaint();\n            this.opacity = 1;\n          }\n      }, 100);\n    });\n  },\n  computed: {\n    lat() {\n      return parseFloat(\n        isNaN(this.marker.lat) ? this.marker.latitude : this.marker.lat\n      );\n    },\n    lng() {\n      return parseFloat(\n        isNaN(this.marker.lng) ? this.marker.longitude : this.marker.lng\n      );\n    },\n    latLng() {\n      if (this.marker instanceof google.maps.LatLng) {\n          return this.marker;\n      }\n      return new google.maps.LatLng(this.lat, this.lng);\n    }\n  },\n  destroyed() {\n     if (this.$clusterObject) {\n      this.$clusterObject.removeMarker(this.$overlay, true);\n    } else {\n      this.$overlay.setMap(null);\n      this.$overlay = undefined;\n    }\n  }\n};\n</script>\n"],"sourceRoot":"node_modules/vue2-gmap-custom-marker"}]}